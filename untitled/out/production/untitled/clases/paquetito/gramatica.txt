programa ::= {DECLARATION}

DECLARATION ::= FUN_DECL DECLARATION | VAR_DECL DECLARATION | STATEMENT DECLARATION | ε

FUN_DECL ::= "fun" FUNCTION

VAR_DECL ::= "var" "identifier" VAR_INIT ";"

VAR_INIT ::= "=" EXPRESSION | ε

STATEMENT ::= FOR_STMT | IF_STMT | PRINT_STMT | RETURN_STMT | WHILE_STMT | BLOCK | EXPR_STMT

EXPR_STMT ::= EXPRESSION ";"

FOR_STMT ::= "for" "(" FOR_STMT_1 FOR_STMT_2 FOR_STMT_3 ")" STATEMENT

FOR_STMT_1 ::= VAR_DECL | EXPRESSION ";"

FOR_STMT_2 ::= EXPRESSION ";"

FOR_STMT_3 ::= EXPRESSION | ε

IF_STMT ::= "if" "(" EXPRESSION ")" STATEMENT ELSE_STATEMENT

ELSE_STATEMENT ::= "else" STATEMENT | ε

PRINT_STMT ::= "print" EXPRESSION ";"

RETURN_STMT ::= "return" RETURN_EXP_OPC ";"

RETURN_EXP_OPC ::= EXPRESSION | ε

WHILE_STMT ::= "while" "(" EXPRESSION ")" STATEMENT

BLOCK ::= "{" DECLARATION "}"

EXPRESSION ::= ASSIGNMENT

ASSIGNMENT ::= LOGIC_OR ASSIGNMENT_OPC

ASSIGNMENT_OPC ::= "=" EXPRESSION | ε

LOGIC_OR ::= LOGIC_AND LOGIC_OR_2

LOGIC_OR_2 ::= "or" LOGIC_AND LOGIC_OR_2 | ε

LOGIC_AND ::= EQUALITY LOGIC_AND_2

LOGIC_AND_2 ::= "and" EQUALITY LOGIC_AND_2 | ε

EQUALITY ::= COMPARISON EQUALITY_2

EQUALITY_2 ::= "==" COMPARISON EQUALITY_2 | "!=" COMPARISON EQUALITY_2 | ε

COMPARISON ::= TERM COMPARISON_2

COMPARISON_2 ::= ">" TERM COMPARISON_2 | ">=" TERM COMPARISON_2 | "<" TERM COMPARISON_2 | "<=" TERM COMPARISON_2 | ε

TERM ::= FACTOR TERM_2

TERM_2 ::= "+" FACTOR TERM_2 | "-" FACTOR TERM_2 | ε

FACTOR ::= UNARY FACTOR_2

FACTOR_2 ::= "*" UNARY FACTOR_2 | "/" UNARY FACTOR_2 | ε

UNARY ::= "!" UNARY | "-" UNARY | CALL

CALL ::= PRIMARY CALL_2

CALL_2 ::= "(" ARGUMENTS_OPC ")" CALL_2 | ε

PRIMARY ::= "true" | "false" | "null" | "number" | "string" | "identifier" | "(" EXPRESSION ")"

FUNCTION ::= "identifier" "(" PARAMETERS_OPC ")" BLOCK

FUNCTIONS ::= FUN_DECL FUNCTIONS | ε

PARAMETERS_OPC ::= PARAMETERS | ε

PARAMETERS ::= "identifier" PARAMETERS_2

PARAMETERS_2 ::= "," "identifier" PARAMETERS_2 | ε

ARGUMENTS_OPC ::= EXPRESSION ARGUMENTS | ε

ARGUMENTS ::= "," EXPRESSION ARGUMENTS | ε
